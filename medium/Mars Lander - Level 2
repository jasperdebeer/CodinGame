using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

class Player
{
    static void Main(string[] args)
    {
        string[] inputs;
        int surfaceN = int.Parse(Console.ReadLine()); // the number of points used to draw the surface of Mars.
        List<int> flatX = new List<int>();
        int previousY = int.MaxValue;
        int previousX = int.MaxValue;
        
        int vlakteMiddelpunt = 0;
        int afstandTotMiddelpunt = 0;
        
        //afstand ints
        int landingZone = 750;
        
        string location = "";
        int sideRotation = 22;
        
        for (int i = 0; i < surfaceN; i++)
        {
            inputs = Console.ReadLine().Split(' ');
            int landX = int.Parse(inputs[0]); // X coordinate of a surface point. (0 to 6999)
            int landY = int.Parse(inputs[1]); // Y coordinate of a surface point. By linking all the points together in a sequential fashion, you form the surface of Mars.
            
            
            //Op zoek naar de linkerkant (flatX[0]) en de rechterkant (flatX[1]) van de vlakte
            if(landY == previousY)
            {
                flatX.Add(previousX);//linkerkant
                flatX.Add(landX);//rechterkant
            }
            else if(landY != previousY)
            {
                previousY = landY;
                previousX = landX;
            }
        }
        
        //linkerkant vlakte
        //Console.WriteLine("flatX[0] = " + flatX[0]);
        
        vlakteMiddelpunt = (int)Math.Floor((flatX[0] + flatX[1])/2.0);
        //Console.WriteLine("vlakteMiddelpunt = " + vlakteMiddelpunt);
        
        //rechterkant vlakte
        //Console.WriteLine("flatX[1] = " + flatX[1]);       
        
        while (true)
        {
            inputs = Console.ReadLine().Split(' ');
            int X = int.Parse(inputs[0]);
            int Y = int.Parse(inputs[1]);
            int hSpeed = int.Parse(inputs[2]); // the horizontal speed (in m/s), can be negative.
            int vSpeed = int.Parse(inputs[3]); // the vertical speed (in m/s), can be negative.
            int fuel = int.Parse(inputs[4]); // the quantity of remaining fuel in liters.
            int rotate = int.Parse(inputs[5]); // the rotate angle in degrees (-90 to 90).
            int power = int.Parse(inputs[6]); // the thrust power (0 to 4).
            
            
            afstandTotMiddelpunt = X - vlakteMiddelpunt;
            //Console.WriteLine("afstandTotMiddelpunt = " + afstandTotMiddelpunt);
            //Console.WriteLine("X = " + X);
            
            if(Math.Abs(afstandTotMiddelpunt) <= landingZone)
                location = "landingZone";
            else if(afstandTotMiddelpunt < landingZone)
                location = "approachLeft";
            else if(afstandTotMiddelpunt > landingZone)
                location = "approachRight";
            //Console.WriteLine("location = " + location);
            
            switch(location)
            {
                case "landingZone":
                    if(vSpeed < -30)
                    {
                        //vSpeed = vSpeeder(vSpeed, -40);
                        rotate = Rotator(rotate, 0);
                        power = Thrust(power,4);
                    }else
                    {
                        if(Math.Abs(hSpeed) > 10 && Math.Abs(hSpeed) <= 40)
                        {
                            //hSpeed = hSpeeder(hSpeed, 20);
                            if(hSpeed > 0)
                            {
                                rotate = Rotator(rotate, sideRotation);
                            }
                            else if(hSpeed <0)
                            {
                                rotate = Rotator(rotate, -sideRotation);
                            }
                        }else if(Math.Abs(hSpeed) > 40)
                        {
                            //hSpeed = hSpeeder(hSpeed, 20);
                            if(hSpeed > 0)
                            {
                                rotate = Rotator(rotate, 2*sideRotation);
                            }
                            else if(hSpeed <0)
                            {
                                rotate = Rotator(rotate, 2*-sideRotation);
                            }
                        }else //als de snelheden binnen de perken zijn
                        {
                            rotate = Rotator(rotate, 0);
                            power = Thrust(power,0);
                        }
                    }
                    break;
                case "approachLeft":
                    
                    if(vSpeed < -40)
                    {
                        rotate = Rotator(rotate, sideRotation);
                        power = Thrust(power,4);
                    }
                    else
                    {
                        if(hSpeed == 0)
                        {
                            rotate = Rotator(rotate, -sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed < 0)
                        {
                            rotate = Rotator(rotate, 2*-sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed > 0 && hSpeed <= 20)
                        {
                            rotate = Rotator(rotate, -sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed > 20 && hSpeed <= 40)
                        {
                            rotate = Rotator(rotate, -sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed > 40)
                        {
                            rotate = Rotator(rotate, 35);
                            power = Thrust(power,4);
                        }
                    }
                    break;
                case "approachRight":
                    if(vSpeed < -30)
                    {
                        rotate = Rotator(rotate, sideRotation);
                        power = Thrust(power,4);
                    }
                    else
                    {
                        if(hSpeed == 0)
                        {
                            rotate = Rotator(rotate, sideRotation);
                            power = Thrust(power,4);
                        }
                        else if(hSpeed > 0)
                        {
                            rotate = Rotator(rotate, 2*sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed < 0 && hSpeed >-20)
                        {
                            rotate = Rotator(rotate, 0);
                            power = Thrust(power,4);
                        }else if(hSpeed < -40)
                        {
                            rotate = Rotator(rotate, -2*sideRotation);
                            power = Thrust(power,4);
                        }else if(hSpeed < -20 && hSpeed >= -40)
                        {
                            rotate = Rotator(rotate, sideRotation);
                            power = Thrust(power,4);
                        }
                    }
                    break;
                default:
                    break;
            }
            Console.WriteLine(rotate + " " + power); // rotate power. rotate is the desired rotate angle. power is the desired thrust power.
        }
    }
        
    public static int Rotator(int huidigerotate, int locationrotate)
    {
        if(huidigerotate == locationrotate)
            return huidigerotate;
        else if(huidigerotate > locationrotate)
        {
            huidigerotate -= 15;
            if(huidigerotate < locationrotate)
                huidigerotate = locationrotate;
        }else if(huidigerotate < locationrotate)
        {
            huidigerotate += 15;
            if(huidigerotate > locationrotate)
                huidigerotate = locationrotate;
        }
        return huidigerotate;
    }
    
    public static int Thrust(int huidigepower, int locationpower)
    {
        if(huidigepower == locationpower)
            return huidigepower;
        else if(huidigepower > locationpower)
            huidigepower--;
        else if(huidigepower < locationpower)
            huidigepower++;
        return huidigepower;
    }
}
