using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
//using System.Drawing;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution
{
    static void Main(string[] args)
    {
        string[] inputs = Console.ReadLine().Split(' ');
        int L = int.Parse(inputs[0]);
        int C = int.Parse(inputs[1]);
        //Console.WriteLine("L en C " + L + " " + C);

        char[,] map = new char[C, L];

        string direction = "SOUTH";

        bool breaker = false;
        bool inverter = false;

        Point location = new Point();
        Point t1 = new Point();
        Point t2 = new Point();

        List<string> answer = new List<string>();
        List<Tuple<int, int, string, bool, bool, int>> tList = new List<Tuple<int, int, string, bool, bool, int>>();

        for (int i = 0; i < L; i++)
        {
            string row = Console.ReadLine();
            int count = 0;
            foreach (char c in row)
            {
                map[count, i] = c;

                if (c == '@')//startplek
                {
                    location.X = count;
                    location.Y = i;
                }
                if (c == 'T')//teleportplekken
                {
                    if (t1.X == 0)
                    {
                        t1.X = count;
                        t1.Y = i;
                        //Console.WriteLine("t1 is " + t1.X + t1.Y);
                    }
                    else
                    {
                        t2.X = count;
                        t2.Y = i;
                        //Console.WriteLine("t2 is " + t2.X + t2.Y);
                    }
                }
                count++;
            }
            //positie weergeven
            //Console.WriteLine("startlocation is " + location);

            //map weergeven
            //Console.WriteLine(row);
        }
        //check of map correct wordt opgeslagen
        //Console.WriteLine("char at map[location.X,location.Y] = " + map[location.X,location.Y]);

        NextDir(map, location, direction, breaker, inverter, 1, t1, t2, true, answer, 0, tList, 0);
    }

    static void NextDir(char[,] mapper, Point location, string dir, bool breaker, bool inverter, int priority, Point t1, Point t2, bool moved, List<string> answer, int samePoint, List<Tuple<int, int, string, bool, bool, int>> tList, int wallsDestroyed)
    {
        char currentPoint = ' ';
        char nextPoint = ' ';
        string direction = dir;
        Point loc = location;
        bool b = breaker;
        bool inv = inverter;
        int wDestroyed = wallsDestroyed;

        currentPoint = mapper[loc.X, loc.Y];
        //Console.WriteLine("currentPoint is " + currentPoint);

        Tuple<int, int, string, bool, bool, int> tuple = new Tuple<int, int, string, bool, bool, int>(location.X, location.Y, direction, b, inv, wDestroyed);

        //Checken of bender op deze plek al is geweest in dezelfde state
        if (tList.Contains(tuple) && moved)
        {
            samePoint++;
            //Console.WriteLine(tuple);
        }
        
        //Looping?
        if (samePoint > 1)//true wanneer meer zelfde points dan bij 'Broken wall?'
        {
            Console.WriteLine("LOOP");
        }
        else// niet looping
        {
            //huidige state opslaan
            tList.Add(tuple);

            if (currentPoint == 'S' || currentPoint == 'E' || currentPoint == 'N' || currentPoint == 'W')
            {
                moved = true;

                if (currentPoint == 'S')
                {
                    dir = "SOUTH";
                    loc.Y++;
                }
                else if (currentPoint == 'E')
                {
                    dir = "EAST";
                    loc.X++;
                }
                else if (currentPoint == 'N')
                {
                    dir = "NORTH";
                    loc.Y--;
                }
                else if (currentPoint == 'W')
                {
                    dir = "WEST";
                    loc.X--;
                }

                //Console.WriteLine(dir);
                answer.Add(dir);
                NextDir(mapper, loc, dir, breaker, inverter, priority, t1, t2, moved, answer, samePoint, tList, wallsDestroyed);
            }
            else
            {
                //Staat bender op een teleport?
                if (currentPoint == 'T' && moved)
                {
                    //welke t is het
                    if (Equals(loc, t1))
                    {
                        loc.X = t2.X;
                        loc.Y = t2.Y;
                    }
                    else
                    {
                        loc.X = t1.X;
                        loc.Y = t1.Y;
                    }
                }

                //nextchar coordinaten berekenen
                if (dir == "SOUTH")
                    loc.Y++;
                else if (dir == "EAST")
                    loc.X++;
                else if (dir == "NORTH")
                    loc.Y--;
                else if (dir == "WEST")
                    loc.X--;

                if (currentPoint == 'B' && moved)
                {
                    breaker = !breaker;
                    //Console.WriteLine("breaker is " + breaker);
                }
                if (currentPoint == 'I' && moved)
                {
                    inverter = !inverter;
                    //Console.WriteLine("inverter is " + inverter);
                }
                moved = true;

                nextPoint = mapper[loc.X, loc.Y];
                //Console.WriteLine("nextpoint is " + nextPoint);

                if (nextPoint != '$')
                {
                    if (nextPoint == '#')
                    {
                        //X en Y resetten omdat de huidige richting niet doorgezet wordt
                        loc.X = location.X;
                        loc.Y = location.Y;
                        dir = NewDir(dir, inverter, priority);
                        //Console.WriteLine("newdir is " + dir);
                        priority++;
                        moved = false;
                    }
                    else if (nextPoint == 'X')
                    {
                        if (!breaker)
                        {
                            //X en Y resetten omdat de huidige richting niet doorgezet wordt
                            loc.X = location.X;
                            loc.Y = location.Y;
                            dir = NewDir(dir, inverter, priority);
                            //Console.WriteLine("newdir is " + dir);
                            priority++;
                            moved = false;
                        }
                        else
                        {
                            mapper[loc.X, loc.Y] = ' ';
                            //Console.WriteLine("X destroyed at " + X+Y);
                            //Console.WriteLine("char at " + X+Y + " is " + mapper[X,Y]);

                            //priority resetten
                            priority = 1;
                            answer.Add(dir);
                            wallsDestroyed++;
                            //Console.WriteLine("wallsDestroyed = " + wallsDestroyed);
                        }
                    }
                    else
                    {
                        //priority resetten
                        priority = 1;
                        answer.Add(dir);
                    }
                    NextDir(mapper, loc, dir, breaker, inverter, priority, t1, t2, moved, answer, samePoint, tList, wallsDestroyed);
                }
                else //finish
                {
                    answer.Add(dir);

                    //alle richtingen writen
                    for (int i = 0; i < answer.Count; i++)
                    {
                        Console.WriteLine(answer[i]);
                    }

                }
            }
        }
    }

    static string NewDir(string dir, bool inverter, int priority)
    {
        if (!inverter)
        {
            if (priority == 1)
                dir = "SOUTH";
            else if (priority == 2)
                dir = "EAST";
            else if (priority == 3)
                dir = "NORTH";
            else
                dir = "WEST";
        }
        else
        {
            if (priority == 1)
                dir = "WEST";
            else if (priority == 2)
                dir = "NORTH";
            else if (priority == 3)
                dir = "EAST";
            else
                dir = "SOUTH";
        }
        return dir;
    }

    struct Point
    {
        public int X, Y;
    }

    static bool Equals(Point one, Point other)
    {
        return one.X == other.X && one.Y == other.Y;
    }
}
